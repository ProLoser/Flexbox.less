// old= 2009 and tweener
//CREANDO MIXINS DE FLEX
.flex-display(@flex:flex) {
    display: -webkit-box; 
    display: -moz-box; 
    display:  ~"@{wk}@{flex}";
    display:  ~"@{ms}@{flex}";
    display:@flex;
}
// FLEX DIRECTION
//direction of the flex containers main axis
.old-box-direction(@old:normal) when (iskeyword(@old))  {
  -webkit-box-direction: @old;
  -moz-box-direction: @old;
  -ms-box-direction: @old;
  -o-box-direction: @old;
  box-direction: @old;
}
.old-box-orient(@old:horizontal) when (iskeyword(@old)) {
  -webkit-box-orient: @old;
  -moz-box-orient: @old;
  -ms-box-orient: @old;
  -o-box-orient: @old;
  box-orient: @old;
}
  .old-flex-direction(@bd:normal,@bo:horizontal){
      .old-box-direction(@bd);
      .old-box-orient(@bo);
  };

.flex-direction(@direction) when (@direction=row) {    .old-flex-direction(normal,horizontal);}
.flex-direction(@direction) when (@direction=column) {.old-box-orient(vertical)}
.flex-direction(@direction) when (@direction=row-reverse) { .old-box-direction(reverse);}
.flex-direction(@direction) when (@direction=column-reverse) { .old-flex-direction(reverse,vertical);}

.flex-direction(@direction) when (iskeyword(@direction))  {

    -webkit-flex-direction: @direction;
    -moz-flex-direction: @direction;
    -ms-flex-direction: @direction;
    -o-flex-direction: @direction;
    flex-direction: @direction;
}


// JUSTIFY-CONTENT
//align flex items along the main axis of the current line of the flex container
.old-flex-justify-content(@old:start) when (iskeyword(@old)) {
     -webkit-box-pack:@old;
     -moz-box-pack:@old;
     -o-box-pack:@old;
     -ms-flex-pack:@old;

}

.flex-justify-content(@justify) when (@justify = flex-start) { .old-flex-justify-content;}
.flex-justify-content(@justify) when (@justify = flex-end) {   .old-flex-justify-content(end);}
.flex-justify-content(@justify) when (@justify = space-between) {   .old-flex-justify-content(justify);}
.flex-justify-content(@justify) when (@justify = space-around) {   .old-flex-justify-content(distribute);}
.flex-justify-content(@justify) when (@justify = center) {   .old-flex-justify-content(center);}

.flex-justify-content(@justify:flex-start) when (iskeyword(@justify)) {
  -webkit-justify-content: @justify;
  -moz-justify-content: @justify;
  -ms-justify-content: @justify;
  -o-justify-content: @justify;
  justify-content: @justify;
}


//ALIGN-ITEMS
// align flex items along the cross axis of the current line of the flex container
.old-flex-align-items(@old:start) when (iskeyword(@old))  {
 -webkit-box-align: @old;
  -moz-box-align: @old;
  -ms-box-align: @old;
  -ms-flex-align: @old; // tweener -ms- spec
  -o-box-align: @old;
  box-align: @old;

}

.flex-align-items(@align_items) when (@align_items = flex-start) { .old-flex-align-items(start)}
.flex-align-items(@align_items) when (@align_items = flex-end) { .old-flex-align-items(end);}
.flex-align-items(@align_items) when (@align_items = center),
                                     (@align_items = stretch),
                                     (@align_items = baseline) { .old-flex-align-items(@align_items);}


.flex-align-items(@align_items:flex-start) when (iskeyword(@align_items)) {
  -webkit-align-items: @align_items;
  -moz-align-items: @align_items;
  -ms-align-items: @align_items;
  -o-align-items: @align_items;
  align-items: @align_items;

}

// LINE WRAP
// controls whether the flex container is single-line or multi-line, and the direction of the cross axis

.old-box-lines(@old:single) when (iskeyword(@old))  {
  -webkit-lines: @old;
  -webkit-box-lines: @old;
  -moz-box-lines: @old;
  -ms-box-lines: @old;
  -o-box-lines: @old;
  box-lines: @old;
}



.flex-wrap(@wrap) when (@wrap = wrap), {.old-box-lines(multiple)}
.flex-wrap(@wrap) when (@wrap = wrap-reverse), {.old-box-lines(multiple);.old-box-direction(reverse);}
.flex-wrap(@wrap) when (@wrap = nowrap), {.old-box-lines;}

.flex-wrap(@wrap:wrap) when (iskeyword(@wrap)) {
  -webkit-flex-wrap: @wrap;
  -moz-flex-wrap: @wrap;
  -ms-flex-wrap: @wrap;
  -o-flex-wrap:@wrap;
  flex-wrap:@wrap;
}
// ALIGN CONTENT
// align a flex containers lines within the flex container when there is extra space in the cross axis, similar to how *justify-content* aligns individual items within the main axis.
// Note, this property has no effect when the flexbox has only a single line
.old-flex-align-content(@old) when (iskeyword(@old)) {
    -ms-flex-line-pack:@old;
}

.flex-align-content(@align_content) when (@align_content = flex-start) {.old-flex-align-content(start)}
.flex-align-content(@align_content) when (@align_content = flex-end) {.old-flex-align-content(end)}
.flex-align-content(@align_content) when (@align_content = space-between) {.old-flex-align-content(justify)}
.flex-align-content(@align_content) when (@align_content = space-around) {.old-flex-align-content(distribute)}

.flex-align-content(@align_content) when (iskeyword(@align_content)) {
  -webkit-align-content: flex-start;
  -moz-align-content: flex-start;
  -o-align-content: flex-start;
  align-content: flex-start;
}
// FLEX FLOW SHORTHAND RULE
.flex-flow(@direction:row,@wrap:nowrap) {
        .flex-direction(@direction);
        .flex-wrap(@wrap);
}

//A MIXIN WITH ALL CONTAINER RULES IN ONE MIXIN
.flex-container(@flex:flex,@direction:0,@wrap:0,@justify:0,@align_items:0,@align_content:0) {
    .flex-display(@flex);
    .flex-direction(@direction);
    .flex-wrap(@wrap);
    .flex-justify-content(@justify);
    .flex-align-items(@align_items);
    .flex-align-content(@align_content);

}



// LETS BEGIN WITH THE ITEMS PROPERTIES 

// FLEX-ORDER
// controls the order in which flex items appear within their flex container
.flex-order(@order) when (isnumber(@order)) {
   -webkit-box-ordinal-group: @order + 1;
  -moz-box-ordinal-group: @order + 1;
  -ms-box-ordinal-group: @order + 1;
  -o-box-ordinal-group: @order + 1;
  box-ordinal-group: @order + 1;
   -ms-flex-order: @order;

// 2013 spec

  -webkit-order: @order;
  -moz-order: @order;
  -ms-order: @order;
  -o-order: @order;
  order: @order;
}

//ALIGN SELF
// allows the alignment to be overridden for individual flex items
.old-flex-align-self(@old) when (iskeyword(@old)) {
  -ms-flex-item-align: @old;
  flex-item-align: @old;
}
.flex-align-self(@align_self) when (@align_self = flex-start) {.old-flex-align-self(start)}
.flex-align-self(@align_self) when (@align_self = flex-end) {.old-flex-align-self(end)}
.flex-align-self(@align_self) when  (@align_self = auto), 
                                (@align_self = center), 
                                (@align_self = baseline), 
                                (@align_self = stretch) {.old-flex-align-self(@align_self)}

.flex-align-self(@align_self:auto) when (iskeyword(@align_self)) {
  -webkit-align-self: flex-start;
  -moz-align-self: flex-start;
  -ms-align-self: flex-start;
  -o-align-self: flex-start;
  align-self: flex-start;
}

//FLEX (RULE FOR ITEM)
// @grow
//   *Number* which determines how much the flex item will *grow* relative to the rest of the flex items in the flex container when positive free space is distributed.
// @shrink
//   *Number* which determines how much the flex item will *shrink* relative to the rest of the flex items in the flex container when negative free space is distributed.
// @basis
//   The initial *width or height* (depending on main axis) of the flex item, before free space is distributed according to the flex factors

.flex(@grow:1,@shrink:0,@basis:auto) when (isnumber(@grow)),
                                            (isnumber(@shrink)),
                                            (iskeyword(@basis))
                                             {
   -webkit-box-flex: @grow;
    -moz-box-flex: @grow;

    -moz-flex: @grow @shrink @basis;
    -webkit-flex: @grow @shrink @basis;
    -o-flex:@grow @shrink @basis;
    -ms-flex:@grow @shrink @basis;
    flex: @grow @shrink @basis;
}

// FLEX ITEM
// MIXIN TO DEFINE ONE ITEM COMPLETELY
.flex-item(@grow:false,@shrink:false,@basis:0,@order:false,@align_self:0){
  .flex(@grow,@shrink,@basis);
  .flex-order(@order);
  .flex-align-self(@align_self);
}
